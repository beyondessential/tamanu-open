name: Publish Release Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: Next version on this release branch
        required: true
        default: patch

jobs:
  run:
    name: Publish Release Version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - if: (!startsWith(github.ref, 'refs/heads/release/'))
      run: |
        echo "This workflow can only be run on a release branch"
        exit 1

    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.TAMANU_RELEASE_PAT }}

    - uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Push tag for current version
      id: tagged
      run: |
        set -euxo pipefail
        git config user.name github-actions
        git config user.email github-actions@github.com
        version=$(jq -r .version package.json)
        git commit --allow-empty -am "release: v$version"
        echo "current_version=$version" | tee -a $GITHUB_OUTPUT
        echo "current_version_ref=$(git show-ref -s HEAD)" | tee -a $GITHUB_OUTPUT
        git tag -a "v$version" -m "release: v$version"
        git push --follow-tags

    - name: Bump version on branch
      run: node scripts/version.mjs '${{ inputs.version }}'

    - name: Commit and push
      id: nextv
      run: |
        set -euxo pipefail
        version=$(jq -r .version package.json)
        git commit -am "release: Bump version to $version"
        echo "next_version=$version" | tee -a $GITHUB_OUTPUT
        git push

    # do release management after the critical bits above as we care less if those fail

    - name: Install git-cliff
      run: npm install -g git-cliff@latest

    - name: Generate release notes
      run: |
        version=${{ steps.tagged.outputs.current_version }}
        pattern="^v$(cut -d. -f-2 <<< "$version" | sed 's/[.]/[.]/g')[.]"
        # 2.6.1 -> ^v2[.]6[.]

        git cliff --topo-order --strip all --latest \
          --tag-pattern "$pattern" --tag "v$version" \
          --output RELEASE_NOTES.md
        cat RELEASE_NOTES.md

    - name: Determine the true latest version
      id: latest
      run: |
        set -euxo pipefail
        git fetch --tags
        git tag --list \
          | grep -E '^v[0-9]+[.][0-9]+[.][0-9]+$' \
          | cut -c2- \
          | sort --version-sort \
          | tail -n1 \
          | sed 's/^/latest_version=/' \
          | tee -a $GITHUB_OUTPUT

    - name: Publish the release
      uses: softprops/action-gh-release@v2
      with:
        name: v${{ steps.tagged.outputs.current_version }}
        tag_name: v${{ steps.tagged.outputs.current_version }}
        target_commitish: ${{ steps.tagged.outputs.current_version_ref }}
        body_path: RELEASE_NOTES.md
        make_latest: ${{ steps.latest.outputs.latest_version == steps.tagged.outputs.current_version }}
